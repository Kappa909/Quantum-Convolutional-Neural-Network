import pennylane as qml

# Define the device
dev = qml.device('lightning.qubit', wires=8,shots=1000)


def encoding(x_,wire1,wire2):
        qml.RY(x_,wires=wire1)
        qml.RY(3*x_,wires=wire2)

    
def encoding_block(x_, theta):
    #for i in range(8):
        #qml.RY(theta[i],wires=i)
    qml.RY(theta[0], wires=0)
    qml.RZ(theta[1], wires=0)
    qml.RX(theta[2], wires=0)
    qml.RY(theta[3], wires=1)
    qml.RZ(theta[4], wires=1)
    qml.RX(theta[5], wires=1)
    qml.CNOT(wires=[0,1])
    qml.RY(theta[6], wires=0)
    qml.RZ(theta[7], wires=0)
    qml.RX(theta[8], wires=0)
    qml.RY(theta[9], wires=1)
    qml.RZ(theta[10], wires=1)
    qml.RX(theta[11], wires=1)
    encoding(x_[0],0,1)
    qml.RY(theta[12], wires=0)
    qml.RZ(theta[13], wires=0)
    qml.RX(theta[14], wires=0)
    qml.RY(theta[15], wires=1)
    qml.RZ(theta[16], wires=1)
    qml.RX(theta[17], wires=1)
    qml.CNOT(wires=[0,1])
    qml.RY(theta[18], wires=0)
    qml.RZ(theta[19], wires=0)
    qml.RX(theta[20], wires=0)
    qml.RY(theta[21], wires=1)
    qml.RZ(theta[22], wires=1)
    qml.RX(theta[23], wires=1)
    encoding(x_[1],0,1)
    qml.RY(theta[24], wires=0)
    qml.RZ(theta[25], wires=0)
    qml.RX(theta[26], wires=0)
    qml.RY(theta[27], wires=1)
    qml.RZ(theta[28], wires=1)
    qml.RX(theta[29], wires=1)
    qml.CNOT(wires=[0,1])
    qml.RY(theta[30], wires=0)
    qml.RZ(theta[31], wires=0)
    qml.RX(theta[32], wires=0)
    qml.RY(theta[33], wires=1)
    qml.RZ(theta[34], wires=1)
    qml.RX(theta[35], wires=1)
    
    qml.RY(theta[36], wires=2)
    qml.RZ(theta[37], wires=2)
    qml.RX(theta[38], wires=2)
    qml.RY(theta[39], wires=3)
    qml.RZ(theta[40], wires=3)
    qml.RX(theta[41], wires=3)
    qml.CNOT(wires=[2,3])
    qml.RY(theta[42], wires=2)
    qml.RZ(theta[43], wires=2)
    qml.RX(theta[44], wires=2)
    qml.RY(theta[45], wires=3)
    qml.RZ(theta[46], wires=3)
    qml.RX(theta[47], wires=3)
    encoding(x_[2],2,3)
    qml.RY(theta[48], wires=2)
    qml.RZ(theta[49], wires=2)
    qml.RX(theta[50], wires=2)
    qml.RY(theta[51], wires=3)
    qml.RZ(theta[52], wires=3)
    qml.RX(theta[53], wires=3)
    qml.CNOT(wires=[2,3])
    qml.RY(theta[54], wires=2)
    qml.RZ(theta[55], wires=2)
    qml.RX(theta[56], wires=2)
    qml.RY(theta[57], wires=3)
    qml.RZ(theta[58], wires=3)
    qml.RX(theta[59], wires=3)
    encoding(x_[3],2,3)
    qml.RY(theta[60], wires=2)
    qml.RZ(theta[61], wires=2)
    qml.RX(theta[62], wires=2)
    qml.RY(theta[63], wires=3)
    qml.RZ(theta[64], wires=3)
    qml.RX(theta[65], wires=3)
    qml.CNOT(wires=[2,3])
    qml.RY(theta[66], wires=2)
    qml.RZ(theta[67], wires=2)
    qml.RX(theta[68], wires=2)
    qml.RY(theta[69], wires=3)
    qml.RZ(theta[70], wires=3)
    qml.RX(theta[71], wires=3)
    
    qml.RY(theta[72], wires=4)
    qml.RZ(theta[73], wires=4)
    qml.RX(theta[74], wires=4)
    qml.RY(theta[75], wires=5)
    qml.RZ(theta[76], wires=5)
    qml.RX(theta[77], wires=5)
    qml.CNOT(wires=[4,5])
    qml.RY(theta[78], wires=4)
    qml.RZ(theta[79], wires=4)
    qml.RX(theta[80], wires=4)
    qml.RY(theta[81], wires=5)
    qml.RZ(theta[82], wires=5)
    qml.RX(theta[83], wires=5)
    encoding(x_[4],4,5)
    qml.RY(theta[84], wires=4)
    qml.RZ(theta[85], wires=4)
    qml.RX(theta[86], wires=4)
    qml.RY(theta[87], wires=5)
    qml.RZ(theta[88], wires=5)
    qml.RX(theta[89], wires=5)
    qml.CNOT(wires=[4,5])
    qml.RY(theta[90], wires=4)
    qml.RZ(theta[91], wires=4)
    qml.RX(theta[92], wires=4)
    qml.RY(theta[93], wires=5)
    qml.RZ(theta[94], wires=5)
    qml.RX(theta[95], wires=5)
    encoding(x_[5],4,5)
    qml.RY(theta[96], wires=4)
    qml.RZ(theta[97], wires=4)
    qml.RX(theta[98], wires=4)
    qml.RY(theta[99], wires=5)
    qml.RZ(theta[100], wires=5)
    qml.RX(theta[101], wires=5)
    qml.CNOT(wires=[4,5])
    qml.RY(theta[102], wires=4)
    qml.RZ(theta[103], wires=4)
    qml.RX(theta[104], wires=4)
    qml.RY(theta[105], wires=5)
    qml.RZ(theta[106], wires=5)
    qml.RX(theta[107], wires=5)
    
    qml.RY(theta[108], wires=6)
    qml.RZ(theta[109], wires=6)
    qml.RX(theta[110], wires=6)
    qml.RY(theta[111], wires=7)
    qml.RZ(theta[112], wires=7)
    qml.RX(theta[113], wires=7)
    qml.CNOT(wires=[6,7])
    qml.RY(theta[114], wires=6)
    qml.RZ(theta[115], wires=6)
    qml.RX(theta[116], wires=6)
    qml.RY(theta[117], wires=7)
    qml.RZ(theta[118], wires=7)
    qml.RX(theta[119], wires=7)
    encoding(x_[6],6,7)
    qml.RY(theta[120], wires=6)
    qml.RZ(theta[121], wires=6)
    qml.RX(theta[122], wires=6)
    qml.RY(theta[123], wires=7)
    qml.RZ(theta[124], wires=7)
    qml.RX(theta[125], wires=7)
    qml.CNOT(wires=[6,7])
    qml.RY(theta[126], wires=6)
    qml.RZ(theta[127], wires=6)
    qml.RX(theta[128], wires=6)
    qml.RY(theta[129], wires=7)
    qml.RZ(theta[130], wires=7)
    qml.RX(theta[131], wires=7)
    encoding(x_[7],6,7)
    qml.RY(theta[132], wires=6)
    qml.RZ(theta[133], wires=6)
    qml.RX(theta[134], wires=6)
    qml.RY(theta[135], wires=7)
    qml.RZ(theta[136], wires=7)
    qml.RX(theta[137], wires=7)
    qml.CNOT(wires=[6,7])
    qml.RY(theta[138], wires=6)
    qml.RZ(theta[139], wires=6)
    qml.RX(theta[140], wires=6)
    qml.RY(theta[141], wires=7)
    qml.RZ(theta[142], wires=7)
    qml.RX(theta[143], wires=7)
    
    
    
    
    
    qml.CNOT(wires=[0,5])
    qml.CNOT(wires=[1,6])
    qml.CNOT(wires=[2,7])
    qml.RY(theta[144],wires=0)
    qml.RY(theta[145],wires=1)
    qml.RY(theta[146],wires=6)
    qml.RY(theta[147],wires=7)
    qml.CNOT(wires=[3,0])
    qml.CNOT(wires=[4,1])
    qml.CNOT(wires=[7,0])
    qml.CNOT(wires=[6,1])
    qml.RY(theta[148],wires=0)
    qml.RY(theta[149],wires=1)
    qml.CNOT(wires=[0,1])
    qml.RY(theta[150],wires=1)
    qml.RY(theta[151],wires=2)
    qml.CNOT(wires=[1,2])
    qml.RY(theta[152],wires=2)
    qml.CNOT(wires=[2,1])
    qml.RY(theta[153],wires=1)


# Define the quantum function
@qml.qnode(dev)
def circuit(weights,feature_vector):
    encoding_block(feature_vector, weights)
    return qml.sample(qml.PauliZ(wires=1))
'''
import numpy as np
initial_weights = 2 * np.pi * np.random.random(size=(154))
drawn_circuit = qml.draw(circuit)(initial_weights,np.array([0,1,2,3,4,5,6,7]))

# Display the circuit
print(drawn_circuit)
'''

